import java.security.*;
import javax.crypto.*;
import java.io.*;
public class AES_S
{
Cipher ecipher;
Cipher dcipher;
AES_S(SecretKey key)
	{
	try
	{
	ecipher=Cipher.getInstance("AES");
	dcipher=Cipher.getInstance("AES");
	ecipher.init(Cipher.ENCRYPT_MODE,key);
	dcipher.init(Cipher.DECRYPT_MODE,key);
	}
	catch(Exception e)
	{		
	}
}
public String encrypt(String str)
{
try
{
byte[] utf8=str.getBytes("UTF8");
byte[] enc=ecipher.doFinal(utf8);
return new sun.misc.BASE64Encoder().encode(enc);
}
catch(Exception e)
{
}

return null;
}
public String decrypt(String str)
{
try
{
byte[] dec=new sun.misc.BASE64Decoder().decodeBuffer(str);
byte[] utf8=dcipher.doFinal(dec);
return new String(utf8,"UTF8");
}
catch(Exception e)
{
}
return null;
}
public static void main(String args[])
{
SecretKey key=null;
{
try
{
KeyGenerator KeyGen=KeyGenerator.getInstance("AES");
key=KeyGen.generateKey();
}
catch(Exception e)
{
e.printStackTrace();
}
AES_S disc=new AES_S(key);
String o="Advance Encryption Standard";
String en=disc.encrypt(o);
String dc=disc.decrypt(en);
System.out.println("Original text:"+o);
System.out.println("Encrypted Text:"+en);
System.out.println("Decrypted Text:"+dc);
}
}
}
-------------------------------------------------------------------------------------------------------------------------------
import java.security.*;
import javax.crypto.*;
import javax.crypto.spec.*;
class DESalgo
{
public static void main(String args[])
{
try
{
KeyGenerator keygen=KeyGenerator.getInstance("DES");
Key key=keygen.generateKey();
Cipher cipher=Cipher.getInstance("DES/CBC/PKCS5Padding");
cipher.init(cipher.ENCRYPT_MODE,key);
String str="Data Encryption Standard";
System.out.println("\nOriginal string :"+str);
byte[] arr1=str.getBytes();
byte[] arr2=cipher.doFinal(arr1);
byte[] initvector=cipher.getIV();
System.out.println("\nEncrypted String :"+arr2);
IvParameterSpec ps=new IvParameterSpec(initvector);
cipher.init(cipher.DECRYPT_MODE,key,ps);
byte[] arr3=cipher.doFinal(arr2);
String str2=new String(arr3);
System.out.println("\nThe Decrypted String :"+str2);
}
catch(Exception e)
{
System.out.println(""+e);
}
}
}
---------------------------------------------------------------------------------------------------------------------
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.io.*;
public class BlowFishCipher
{
public static void main(String args[])throws Exception
{
KeyGenerator keygen=KeyGenerator.getInstance("Blowfish");
SecretKey sy=keygen.generateKey();
Cipher cip=Cipher.getInstance("Blowfish");
cip.init(Cipher.ENCRYPT_MODE,sy);
System.out.println("\n Blowfish Cipher");
System.out.println("Enter a string:");
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
String inputText=br.readLine();
byte[] encrypted=cip.doFinal(inputText.getBytes());
cip.init(Cipher.DECRYPT_MODE,sy);
byte[] decrypted=cip.doFinal(encrypted);
String en=new String(encrypted);
System.out.println("\n");
String de=new String(decrypted);
System.out.println("Encrypted Text is:"+en);
System.out.println("Decrypted Text is:"+de);
}
}
-----------------------------------------------------------------------------------------------------------------------
import java.io.*;
import java.lang.*;
public class Rail
{
public static void main(String args[])
	{
	try
		{
		System.out.print("\n \n\t rail fence technique");
		BufferedReader b;
		String oriText,encText,decText;
		System.out.print("\n Enter the String: ");
		b=new BufferedReader(new InputStreamReader(System.in));
		oriText=b.readLine();
		int m=oriText.length();
		System.out.println("\n the encrypted string is:\n");
		for(int i=0;i<m;)
			{
			char t=oriText.charAt(i);
			System.out.print(t);
			i=i+2;
			}
			for(int i=1;i<m;)
			{
			char t=oriText.charAt(i);
			System.out.print(t);
			i=i+2;
			
			}
			System.out.println("\n");
			}
		catch(Exception I)
		{
	System.out.print(" "+I);
		}
	}
}
----------------------------------------------------------------------------------------
import java.util.*;
public class SimpleC
{
String CipherText="";
String PlainText="";
int numrow=0;
int numcol=0;
char[][]strpt;
public void generateCipher()
{
for(int i=0;i<numrow;i++)
CipherText+=strpt[i][3];
for(int i=0;i<numrow;i++)
CipherText+=strpt[i][5];
for(int i=0;i<numrow;i++)
CipherText+=strpt[i][0];
for(int i=0;i<numrow;i++)
CipherText+=strpt[i][1];
for(int i=0;i<numrow;i++)
CipherText+=strpt[i][4];
for(int i=0;i<numrow;i++)
CipherText+=strpt[i][2];
}
public void generatePlain()
{
int K=0;
for(int j=0;j<numrow;j++)
{
strpt[j][3] = CipherText.charAt(K++);
if(K>=CipherText.length())
break;
}
for(int j=0;j<numrow;j++)
{
strpt[j][5] = CipherText.charAt(K++);
if(K>=CipherText.length())
break;
}
for(int j=0;j<numrow;j++)
{
strpt[j][0] = CipherText.charAt(K++);
if(K>=CipherText.length())
break;}
for(int j=0;j<numrow;j++)
{
strpt[j][1] = CipherText.charAt(K++);
if(K>=CipherText.length())
break;}
for(int j=0;j<numrow;j++)
{
strpt[j][4] = CipherText.charAt(K++);
if(K>=CipherText.length())
break;
}
for(int j=0;j<numrow;j++)
{
strpt[j][2] = CipherText.charAt(K++);
if(K>=CipherText.length())
break;
}}
public String Encrypt(String Text)
{
PlainText=Text.toLowerCase();
PlainText=Text.replaceAll("\\s"," ");
strpt=new char[20][6];
int row=0,col=0,j=0;
while(j<PlainText.length())
{
for(col=0;col<6;col++)
{
if(j<(PlainText.length()))
strpt[row][col]=PlainText.charAt(j++);
else
break;
}
col=0;++row;
}
int r=row;
System.out.print("Columns are:");
System.out.print("Col1 | Col2 | Col3 |Col4 |Col5 | Col6 | ");
System.out.print("----------------------------------");
for(row=0;row<r;row++)
{
for(col=0;col<6;col++)
{
System.out.print(" "+strpt[row][col]+"|");
}
System.out.print("  ");
}
System.out.print("----------------------------------");
numrow=PlainText.length()/6;
numcol=PlainText.length()%6;
if(numcol!=0)
numrow+=1;
switch(numcol)
{
case 0:generateCipher();break;
case 1:generateCipher();break;
case 2:generateCipher();break;
case 3:generateCipher();break;
case 4:generateCipher();break;
case 5:generateCipher();break;
}
CipherText=CipherText.toUpperCase();
return CipherText;
}
public String Decrypt(String Text)
{
CipherText=Text.toLowerCase();
CipherText=Text.replaceAll("\\s"," ");
char[ ][ ] strpt=new char[20][6];
numrow=CipherText.length()/6;
numcol=CipherText.length()%6;
int K=0;
switch(numcol)
{
case 0:generatePlain();break;
case 1:generatePlain();break;
case 2:generatePlain();break;
case 3:generatePlain();break;
case 4:generatePlain();break;
case 5:generatePlain();break;
}
int row=0,col=0;
for(K=0;K<CipherText.length();K++)
{
Text +=strpt[row][col];
if(col>=5)
{
col=0;row+=1;
}
else
col+=1;
}
return PlainText;
}
public static void main(String args[])
{
 String pt="",ct="",dpt="";
 System.out.println("\n\t\t Simple Columnar Transportion Technique");
 Scanner str=new Scanner(System.in);
System.out.print("Enter Plain Text");
pt=str.nextLine();
System.out.println("\n");
SimpleC s1=new SimpleC();
ct=s1.Encrypt(pt);
System.out.println("\n Encrypted Text is:"+ct);
dpt=s1.Decrypt(ct);
System.out.println("\n Decrypt Text is :"+dpt);
}
}

------------------------------------------------------------------------------------------
import java.util.*;
public class MultiC
{
String CipherText="";
String PlainText="";
int numrow=0;
int numcol=0;
char[][]strpt;
public void generateCipher()
{
for(int i=0;i<numrow;i++)
CipherText+=strpt[i][3];
for(int i=0;i<numrow;i++)
CipherText+=strpt[i][5];
for(int i=0;i<numrow;i++)
CipherText+=strpt[i][0];
for(int i=0;i<numrow;i++)
CipherText+=strpt[i][1];
for(int i=0;i<numrow;i++)
CipherText+=strpt[i][4];
for(int i=0;i<numrow;i++)
CipherText+=strpt[i][2];
}
public void generatePlain()
{
int K=0;
for(int j=0;j<numrow;j++)
{
strpt[j][3] = CipherText.charAt(K++);
if(K>=CipherText.length())
break;
}
for(int j=0;j<numrow;j++)
{
strpt[j][5] = CipherText.charAt(K++);
if(K>=CipherText.length())
break;
}
for(int j=0;j<numrow;j++)
{
strpt[j][0] = CipherText.charAt(K++);
if(K>=CipherText.length())
break;}
for(int j=0;j<numrow;j++)
{
strpt[j][1] = CipherText.charAt(K++);
if(K>=CipherText.length())
break;}
for(int j=0;j<numrow;j++)
{
strpt[j][4] = CipherText.charAt(K++);
if(K>=CipherText.length())
break;
}
for(int j=0;j<numrow;j++)
{
strpt[j][2] = CipherText.charAt(K++);
if(K>=CipherText.length())
break;
}}
public String Encrypt(String Text)
{
PlainText=Text.toLowerCase();
PlainText=Text.replaceAll("\\s"," ");
strpt=new char[20][6];
int row=0,col=0,j=0;
while(j<PlainText.length())
{
for(col=0;col<6;col++)
{
if(j<(PlainText.length()))
strpt[row][col]=PlainText.charAt(j++);
else
break;
}
col=0;++row;
}
int r=row;
System.out.print("Columns are:");
System.out.print("Col1|Col2|Col3|Col4|Col5|Col6|");
System.out.print("----------------------------------");
for(row=0;row<r;row++)
{
for(col=0;col<6;col++)
{
System.out.print(""+strpt[row][col]+"|");
}
System.out.print("  ");
}
System.out.print("----------------------------------");
numrow=PlainText.length()/6;
numcol=PlainText.length()%6;
if(numcol!=0)
numrow+=1;
switch(numcol)
{
case 0:generateCipher();break;
case 1:generateCipher();break;
case 2:generateCipher();break;
case 3:generateCipher();break;
case 4:generateCipher();break;
case 5:generateCipher();break;
}
CipherText=CipherText.toUpperCase();
return CipherText;
}
public static void main(String args[])
{
 String pt="",ct="",dpt="";
 System.out.println("\n\t\t Simple Columnar Transportion Technique");
 Scanner str=new Scanner(System.in);
System.out.print("Enter Plain Text");
pt=str.nextLine();
System.out.println("\n");
System.out.println("Enter no of rounds");
int num=Integer.parseInt(str.nextLine());
System.out.println("\n");
for(int i=1;i<=num;i++)
{
System.out.println("round"+i);
MultiC s1=new MultiC();
ct=s1.Encrypt(pt);
pt=ct;
System.out.println("encrypted text is:"+ct);
System.out.println("\n");
}
}
}
--------------------------------------------------------------------------------------------
import java.io.*;
import java.util.*;

public class Vernam
{
	char vernamTable[][]=new char[26][26];
	public void GeneratePad()
	{
		char Array[]=new char[26];
		char c='a';
		for(int x=0;x<26;x++)
		{
			Array[x]=c;
			c++;
		}
		int i,j,k;
		i=0;
		while(i<26)
		{
			k=i;
			for(j=0;j<26;j++)
			{
				if(k>=26)
				k=0;
				vernamTable[i][j]=Array[k++];
			}
			i++;
		}
	}
private String key;
public Vernam(String k)
{
	key=k;
}
public String encrypt(String plainText)
{
	char[] plainTextArea=plainText.toCharArray();
	while(key.length()<plainText.length())
		{
			key+=key;
		}
	key=key.substring(0,plainText.length());
	System.out.print(key);
	char[] keyArray=key.toCharArray();
	String cipherText="";
	for(int i=0;i<plainText.length();i++)
		{
			int rowpos=keyArray[i]-'a';
			int colpos=keyArray[i]-'a';
			cipherText+=vernamTable[rowpos][colpos];
		}
		return cipherText;
	}
public String decrypt(String cipherText)
{
		String plainText="";
		char[] cipherTextArr=cipherText.toCharArray();
		char[] keyArray=key.toCharArray();
		char[] plainTextArr=new char[keyArray.length];
		for(int i=0;i<keyArray.length;i++)
		{
			int rowpos=keyArray[i]-'a';
			int cipherPos=new String(vernamTable[rowpos]).indexOf(cipherTextArr[i]);
			plainTextArr[i]=vernamTable[0][cipherPos];
		}
		plainText=new String(plainTextArr);
		return plainText;
	}

	public static void main(String[] args)
	{
		Scanner c=new Scanner(System.in);
		System.out.println("Enter a text key=\t");
		String keyText=c.nextLine();
		Vernam algo=new Vernam(keyText);
		algo.GeneratePad();
		System.out.println("\n Enter the plain text=\t");
		String plainText=c.nextLine();
		String cipherText=algo.encrypt(plainText);
		System.out.println("\n\t the encrypted text is=\t"+cipherText);
		plainText=algo.decrypt(cipherText);
		System.out.println("\n\t the decrypted key is=\t"+plainText);
	}
}
------------------------------------------------------------------------------------------
import java.io.*;
import java.security.*;
import javax.crypto.*;
import javax.crypto.spec.*;

class RC4Algo
{
String strPlainText;
static char Cipher[];
RC4Algo(String strPlainText,int[] key)
{
this.strPlainText=strPlainText;
int S[]=new int[255];
Cipher=new char[strPlainText.length()];
for(int i=0;i<S.length;i++)
{
S[i]=i;
}
int j=0; int i=0;
for(int k=0; k<strPlainText.length(); k++)
{
int modk=(k%key.length);
int Kc=key[modk];
j=(S[i]+j+Kc)%256+1;
int temp=S[i];
S[i]=S[j];
S[j]=temp;
int Sc=(S[i]+S[j])%256;
int Ck=S[Sc];
Cipher [k]=(char)(Ck^(int)strPlainText.charAt(k));
i=i+1;
}
}
public static void main(String args[])
{
int K[]={1,2,3,4};
String stroriginal="hello world";
System.out.println("original string is:"+stroriginal);
new RC4Algo(stroriginal,K);
System.out.println("\n encrypted String is:");
for (int i=0;i<Cipher.length;i++)
{
System.out.println(" "+Cipher[i]);
}
System.out.println("\n");
}
}
---------------------------------------------------------------------------------------------
import java.math.*;
import java.security.*;
public  class RSAalgo
{
	BigInteger p,q,n,d,e,ph,t;
	SecureRandom r;
	public RSAalgo()
{
		r=new SecureRandom();
		p=new BigInteger(510,100,r);
		q=new BigInteger(510,100,r);
	System.out.println("\n\t RSA algorithm ");
	System.out.println("\n Prime no p="+p.intValue());
	System.out.println("\n Prime no q="+q.intValue());
		n=p.multiply(q);
		ph=(p.subtract(new BigInteger("1")));
		ph=ph.multiply(q.subtract(new BigInteger("1")));
		e=new BigInteger("2");
while(ph.gcd(e).intValue()>1 || e.compareTo(ph)!=-1)
		e=e.add(new BigInteger ("1"));
		d=e.modInverse(ph);
	System.out.println("\n Public key=("+n.intValue()+","+e.intValue()+")");
	System.out.println("\n Public key=("+n.intValue()+","+d.intValue()+")");
		BigInteger msg=new BigInteger("96");
	System.out.println("\n Message is: "+msg);
		BigInteger enmsg=encrypt(msg,e,n);
	System.out.println("\n Encrypted msgis: "+enmsg.intValue());
		BigInteger demsg=encrypt(msg,e,n);
	System.out.println("\n Decrypted msgis: "+demsg.intValue());
	}
BigInteger encrypt(BigInteger msg,BigInteger d,BigInteger n)
	{
		return msg.modPow(e,n);
	}
BigInteger  decrypt(BigInteger msg,BigInteger d,BigInteger n)
	{
		return msg.modPow(d,n);
	}
public static void main(String[]args)
	{
		new RSAalgo();
	}
}
------------------------------------------------------------------------------------
import java.io.*;
public class Caesar
{
int offset=3;
public String encrypt(String s)throws IOException 
{
StringBuffer sb=new StringBuffer();
for(int i=0;i<s.length();i++)
{
char t=s.charAt(i);
if((t>='A')&&(t<='Z'))
{
int t1=t-'A'+offset;
t1=t1%26;
sb.append((char)(t1+'A'));
}
else if((t>='a')&&(t<='z'))
{
int t1=t-'a'+offset;
t1=t1%26;
sb.append((char)(t1+'a'));
}
}
return sb.toString();
}
public String decrypt(String s)throws IOException
{
StringBuffer sb=new StringBuffer();
for(int i=0;i<s.length();i++)
{
char t=s.charAt(i);
if((t>='A')&&(t<='Z'))
{
int t1=t-'A'-offset;
if(t1<0) t1=26+t1;
sb.append((char)(t1+'A'));
}
if((t>='a')&&(t<='z'))
{
int t1=t-'a'-offset;
if(t1<0) t1=26+t1;
sb.append((char)(t1+'a'));
}
}
return sb.toString();
}
public static void main(String args[])throws IOException
{
BufferedReader b;
System.out.println("\n Caesar Technique:");
System.out.println("\n Enter the string:");
b=new BufferedReader(new InputStreamReader(System.in));
String oriStr=b.readLine();
Caesar c=new Caesar();
String encstr=c.encrypt(oriStr);
System.out.println("\n Encrpyted string is:"+encstr);
String decstr=c.decrypt(encstr);
System.out.println("\n Decrpyted string is:"+decstr);
System.out.println("\n");
}
}
-------------------------------------------------------------------------------------------
import java.io.*;
public class Modifierceasar
{
int offset=7;
public String encrypt(String s)throws IOException 
{
StringBuffer sb=new StringBuffer();
for(int i=0;i<s.length();i++)
{
char t=s.charAt(i);
if((t>='A')&&(t<='Z'))
{
int t1=t-'A'+offset;
t1=t1%26;
sb.append((char)(t1+'A'));
}
else if((t>='a')&&(t<='z'))
{
int t1=t-'a'+offset;
t1=t1%26;
sb.append((char)(t1+'a'));
}
}
return sb.toString();
}
public String decrypt(String s)throws IOException
{
StringBuffer sb=new StringBuffer();
for(int i=0;i<s.length();i++)
{
char t=s.charAt(i);
if((t>='A')&&(t<='Z'))
{
int t1=t-'A'-offset;
if(t1<0) t1=26+t1;
sb.append((char)(t1+'A'));
}
if((t>='a')&&(t<='z'))
{
int t1=t-'a'-offset;
if(t1<0) t1=26+t1;
sb.append((char)(t1+'a'));
}
}
return sb.toString();
}
public static void main(String args[])throws IOException
{
BufferedReader b;
System.out.println("\n Caesar Technique:");
System.out.println("\n Enter the string:");
b=new BufferedReader(new InputStreamReader(System.in));
String oriStr=b.readLine();
Modifierceasar c=new Modifierceasar();
String encstr=c.encrypt(oriStr);
System.out.println("\n Encrpyted string is:"+encstr);
String decstr=c.decrypt(encstr);
System.out.println("\n Decrpyted string is:"+decstr);
System.out.println("\n");
}
}
--------------------------------------------------------------------------------------------------
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.Random;

class DHelman
{
	int x,y;
	BigInteger n,g,a1,b1,k1,k2;
	Random rnd;

	DHelman()
	{
	rnd=new Random();
	x=3;
	y=6;
	n=new BigInteger(7,2,rnd);
	g=new BigInteger(7,2,rnd);
	}

	void calk()
	{
		a1=(g.pow(x).mod(n));
		b1=(g.pow(y).mod(n));
		k1=(b1.pow(x).mod(n));
		k2=(a1.pow(y).mod(n));

		System.out.println("n"+n);
		System.out.println("g"+g);
		System.out.println("k1"+k1);
		System.out.println("k2"+k2);
	}
}

class DHelmanMain
{
	public static void main(String args[]){
	DHelman d=new DHelman();
	d.calk();
}
}
--------------------------------------------------------------------------------------------
import java.io.*;
public class Vigenere(poly) 
{
public static void main(String [] args)
{
String key="CIPHER";
String ori="thisiscryptosystem";
String enc=encrypt(ori,key);
System.out.println("\n" +enc);
System.out.println("\n"+decrypt(enc,key));
}
static String encrypt(String text,final String key)
{
String res="";
text=text.toUpperCase();
for(int i=0,j=0;i<text.length();i++)
{
char c=text.charAt(i);
if(c<'A'||c>'Z')continue;
res+=(char)((c+key.charAt(j)-2*'A')%26+'A');
j=++j%key.length();
}
return res;
}
static String decrypt(String text,final String key)
{
String res="";
text=text.toUpperCase();
for(int i=0,j=0;i<text.length();i++)
{
char c=text.charAt(i);
if(c<'A'||c>'Z')continue;	
res+=(char)((c-key.charAt(j)+26)%26+'A');
j=++j%key.length();
}
return res;
}
}
-----------------------------------------------------------------------------------------------
import java.io.*;
import java.util.Random;
public class Monoalphabetic
{
	public int offset()
	{
	int ret;
	Random ran=new Random();
	ret=ran.nextInt(10);
	System.out.print("  " +ret);
	return ret;
	}
	public String encrypt(String s)throws IOException
	{
		StringBuffer sb=new StringBuffer();
		for(int i=0;i<s.length();i++)
		{
			char t=s.charAt(i);
			if((t>='A')&&(t<='Z'))
			{
				int t1=t-'A'+offset();
				t1=t1%26;
				sb.append((char)(t1+'A'));
			}
			else if((t>='a')&&(t<='z'))
			{
				int t1=t-'a'+offset();
				t1=t1%26;
				sb.append((char)(t1+'a'));
			}

		}
		return sb.toString();
	}
	public static void main(String args[]) throws IOException
	{
	BufferedReader b;
	System.out.println("\n\t\t Monoaphabetic encryption");
	System.out.print("\n Enter the String: ");
	b=new BufferedReader(new InputStreamReader(System.in));
	String oriStr=b.readLine();
	Monoalphabetic c=new Monoalphabetic();
	String encStr=c.encrypt(oriStr);
	System.out.println("\n The encrypted string is:"+encStr);
	System.out.println("\n");
	} 
}
--------------------------------------------------------------------------------------------------